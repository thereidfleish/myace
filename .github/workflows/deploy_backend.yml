
name: Backend CI/CD

# Controls when the workflow will run
on:
  pull_request:
  push:
    branches:
      - main
    paths:
      - backend/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test_and_deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: db
          POSTGRES_PASSWORD: password
          POSTGRES_USER: dbmasteruser
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # - name: Install PostgreSQL client
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install --yes postgresql-client

      # # queries database with postgres client
      # - name: Query database
      #   run: psql -h localhost -d db -U dbmasteruser -c 'SELECT 1;'
      #   env:
      #     # postgress password is required; alternatively, you can run:
      #     # `PGPASSWORD=postgres_password psql ...`
      #     PGPASSWORD: password

      # handle documentation
      - name: Install redoc-cli
        run: |
          npm i -g redoc-cli
      - name: Generate docs
        run: |
          redoc-cli build api.yml --options.theme.colors.primary.main=green -o src/app/docs.html

      - name: Install Python and dependencies
        run: |
          sudo apt update
          sudo apt install --yes python3.9
          python3.9 --version
          python3.9 -m pip install -e src/
          python3.9 -m pip install pytest
      - name: Run backend tests
        run: |
          python3.9 -m pytest src/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CF_PRIVATE_KEY: ${{ secrets.CF_PRIVATE_KEY }}
          CF_PUBLIC_KEY_ID: ${{ secrets.CF_PUBLIC_KEY_ID }}
          DB_ENDPOINT: localhost # ${{ job.services.postgres.ports[5432] }}
          DB_NAME: db
          DB_PASSWORD: password
          DB_USERNAME: dbmasteruser
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
          G_CLIENT_IDS: ${{ secrets.G_CLIENT_IDS }}
          S3_CF_DOMAIN: ${{ secrets.S3_CF_DOMAIN }}
          S3_CF_SUBDOMAIN: ${{ secrets.S3_CF_SUBDOMAIN }}
          VIEW_DOCS_KEY: ${{ secrets.VIEW_DOCS_KEY }}

      # TODO: automatically install AWS requirements if missing
      - name: Check for AWS-CLI v2
        run: |
          if (aws --version | grep aws-cli/2) then (exit 0) else (aws --version && exit 1) fi

      - name: Install lightsailctl plugin
        run: |
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Install Docker
        uses: docker-practice/actions-setup-docker@master

      # Runs a single command using the runners shell
      - name: Run deploy.py
        run: |
          ./deploy.py
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
