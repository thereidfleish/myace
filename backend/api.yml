openapi: 3.0.0
info:
  version: '1'
  title: 'MyAce API Documentation'
  x-logo:
    url: 'https://myace.ai/logo.svg'
    # backgroundColor: '#FFFFFF'
    altText: 'MyAce logo'
servers:
  - url: 'https://api.myace.ai'
paths:
  /register/:
    post:
      summary: Register with email
      description: This route creates a new user via email and password and establishes a session.
      tags:
        - User
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                type: object
                required:
                  - username
                  - display_name
                  - email
                  - password
                properties:
                  username:
                    $ref: "#/components/schemas/UserUsername"
                  display_name:
                    $ref: "#/components/schemas/UserDisplayName"
                  biography:
                    $ref: "#/components/schemas/UserBio"
                  email:
                    $ref: "#/components/schemas/UserEmail"
                  password:
                    $ref: "#/components/schemas/UserPassword"
      security: [] # no authentication
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login/:
    post:
      summary: Login
      description: This route establishes a session and returns a user.
      tags:
        - User
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                oneOf:
                  - type: object
                    description: Login with email and password
                    required:
                      - method
                      - email
                      - password
                    properties:
                      method:
                        type: string
                        description: Login with email and password.
                        enum: [password]
                      email:
                        $ref: "#/components/schemas/UserEmail"
                      password:
                        $ref: "#/components/schemas/UserPassword"
                  - type: object
                    description: Register/Login with Google. If the user does not exist, the user is created.
                    required:
                      - method
                      - token
                    properties:
                      method:
                        type: string
                        description: Login with Google OAuth.
                        enum: [google]
                      token:
                        type: string
                        description: A valid Google OAuth token.
                        example: eyJhbGjQ4OiJSUzpZCI6NmYxNjQ4MjAwNI1NiciIIsImtWEyYkyMTQwMThkMDI5Y2E0NmZiNT2RhZjI2ZDYiLCJ0eXAiOiJ.eyJpc3MiOiJodKV1QifQHRwczovL2FjY291...
      security: [] # no authentication
      responses:
        '200':
          description: User fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout/:
    post:
      summary: Logout
      description: This route ends a user session. All sensitive routes will return error code `401` until the user's session is reestablished.
      tags:
        - User
      responses:
        '204':
          description: Logout successful
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # TODO: implement
  # /usernames/{username}/check/:
  #   get:
  #     summary: Check for valid username
  #     description: This route checks the validity and availability of a given username.
  #     tags:
  #       - User
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The username to check
  #         required: true
  #         schema:
  #           $ref: '#/components/schemas/UserUsername'
  #     security: [] # no authentication
  #     responses:
  #       '200':
  #         description: Checked username
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               required:
  #                 - valid
  #                 - invalid_msg
  #                 - available
  #               properties:
  #                 valid:
  #                   type: boolean
  #                   description: Whether or not the username is valid.
  #                   example: true
  #                 invalid_msg:
  #                   type: string
  #                   nullable: true
  #                   description: Will be `null` if `valid` is `true`. A user-friendly error message explaining why the username is invalid.
  #                   example: null
  #                 available:
  #                   type: boolean
  #                   description: Whether or not another user has reserved this username.
  #       default:
  #         description: Unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'

  /users/{user_id}/:
    get:
      summary: Get individual user
      description: This route retrieves the profile of a given user. Can be used to check if the client is logged in.
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          description: The ID of the user the client wishes to fetch.
          required: true
          schema:
            $ref: '#/components/schemas/UserIDOrMe'
      responses:
        '200':
          description: Retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update current user
      description: This route edits the profile of the user who is currently logged in.
      tags:
        - User
      requestBody:
        description: All fields are optional
        required: false
        content:
          'application/json':
              schema:
                type: object
                properties:
                  username:
                    $ref: "#/components/schemas/UserUsername"
                  display_name:
                    $ref: "#/components/schemas/UserDisplayName"
                  biography:
                    $ref: "#/components/schemas/UserBio"
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete current user
      description: This route permanently deletes the profile of the user who is currently logged in along with all associated information.
      tags:
        - User
      responses:
        '204':
          description: User deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/uploads:
    get:
      summary: Get all uploads
      description: Retrieve a list of the current user's uploads.
      tags:
        - Uploads
      parameters:
        - name: bucket
          in: query
          description: Filter response to uploads in a given bucket.
          required: false
          schema:
            $ref: "#/components/schemas/BucketID"
        - name: shared-with
          in: query
          description: Filter response to uploads shared with a given user (either individually or as a part of a group).
          required: false
          schema:
            $ref: "#/components/schemas/UserID"
      responses:
        '200':
          description: Retrieved uploads
          content:
            application/json:
              schema:
                type: object
                required: [uploads]
                properties:
                  uploads:
                    type: array
                    items:
                      $ref: "#/components/schemas/Upload"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_id}/uploads:
    get:
      summary: Get another user's uploads
      description: Retrieve a list of another user's uploads that are visible to the current user.
      tags:
        - Uploads
      parameters:
        - name: user_id
          in: path
          description: Numeric ID of the uploads' owner
          required: true
          schema:
            $ref: "#/components/schemas/UserID"
        - name: bucket
          in: query
          description: Filter response to uploads in a given bucket.
          required: false
          schema:
            $ref: "#/components/schemas/BucketID"
      responses:
        '200':
          description: Retrieved uploads
          content:
            application/json:
              schema:
                type: object
                required: [uploads]
                properties:
                  uploads:
                    type: array
                    items:
                      $ref: "#/components/schemas/Upload"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploads/{upload_id}/:
    get:
      summary: Get upload by ID
      description: This route returns a specific upload, containing the URL to Apple's HTTP Live Streaming (HLS) playlist and setting cookies which enable temporary URL access.
      tags:
        - Uploads
      parameters:
        - name: upload_id
          in: path
          description: Numeric ID of the upload to get
          required: true
          schema:
            $ref: "#/components/schemas/UploadID"
      responses:
        '200':
          description: Retrieved upload
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Upload"
                  - type: object
                    properties:
                      url:
                        type: string
                        description: "Will be omitted if stream_ready is false."
                        example: "https://www.something.m3u8"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Edit upload
      description: This route edits the attributes of an upload.
      operationId: "editUpload" # keeping operationId here so i don't forget about it
      tags:
        - Uploads
      parameters:
        - name: upload_id
          in: path
          description: Numeric ID of the upload to edit
          required: true
          schema:
            $ref: "#/components/schemas/UploadID"
      requestBody:
        description: All fields are optional
        required: false
        content:
          'application/json':
              schema:
                type: object
                properties:
                  display_title:
                    $ref: '#/components/schemas/UploadDisplayTitle'
                  bucket_id:
                    $ref: '#/components/schemas/BucketID'
                  visibility:
                    $ref: '#/components/schemas/VisibilitySettingReq'
      responses:
        '200':
          description: Updated upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete upload
      description: This route permanently deletes a specified upload.
      tags:
        - Uploads
      parameters:
        - name: upload_id
          in: path
          description: Numeric ID of the upload to delete
          required: true
          schema:
            $ref: "#/components/schemas/UploadID"
      responses:
        '204':
          description: Deleted upload
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploads/:
    post:
      summary: Create upload URL
      # TODO: what happens if an upload fails?
      description: This route returns a presigned URL, which must be used to upload a video file directly to AWS using a POST request. The POST request to the AWS url must contain the specified fields in the request body. Furthermore, all field names containing underscores within fields, such as x_amz_date, must be hyphenated (ex. x-amz-date) when uploading to AWS. After a successful upload, the client should request to convert the media to a streamable format.
      tags:
        - Uploads
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                type: object
                required:
                  - filename
                  - display_title
                  - bucket_id
                  - visibility
                properties:
                    filename:
                      type: string
                      example: "volley.mp4"
                    display_title:
                      $ref: '#/components/schemas/UploadDisplayTitle'
                    bucket_id:
                      $ref: '#/components/schemas/BucketID'
                    visibility:
                      $ref: '#/components/schemas/VisibilitySettingReq'
      responses:
        '201':
          description: Upload URL created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - url
                  - fields
                properties:
                  id:
                    $ref: '#/components/schemas/UploadID'
                  url:
                    type: string
                    example: "https://s3.us-east-2.amazonaws.com/example"
                  fields:
                    type: object
                    required:
                      - key
                      - x_amz_algorithm
                      - x_amz_credential
                      - x_amz_date
                      - policy
                      - x_amz_signature
                    properties:
                      key:
                        type: string
                        example: "volley.mp4"
                      x_amz_algorithm:
                        type: string
                      x_amz_credential:
                        type: string
                      x_amz_date:
                        type: string
                      policy:
                        type: string
                      x_amz_signature:
                        type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploads/{upload_id}/convert/:
    post:
      summary: Convert upload to stream-ready
      description: This route begins converting an upload into a streamable format.
      tags:
        - Uploads
      parameters:
        - name: upload_id
          in: path
          description: Numeric ID of the upload to convert
          required: true
          schema:
            $ref: '#/components/schemas/UploadID'
      responses:
        '204':
          description: 'Began conversion'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploads/{upload_id}/download/:
    post:
      summary: Get download URL
      description: This route returns a presigned URL which can be used to download the originally uploaded file directly from AWS. If a user can see a post, they are permitted to download it.
      tags:
        - Uploads
      parameters:
        - name: upload_id
          in: path
          description: Numeric ID of the upload to download
          required: true
          schema:
            $ref: '#/components/schemas/UploadID'
      responses:
        '200':
          description: 'Retrieved URL'
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
                    example: "https://www.something.com/.../filename.mp4"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments:
    get:
      summary: Get all comments
      description: Without any query parameters, get a list of comments authored by the current user.
      tags:
        - Comments
      parameters:
        - name: upload
          in: query
          description: Return all comments under a specific upload ID.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        # - name: courtship
        #   in: query
        #   description: "Filter response to comments created by a specific type of user. The user may only view coach comments on their own uploads. TODO: this needs to be fixed"
        #   required: false
        #   schema:
        #     type: string
        #     enum:
        #       - friend
        #       - coach
        #       - student
      responses:
        '200':
          description: 'Retrieved comments'
          content:
            application/json:
              schema:
                type: object
                required: [comments]
                properties:
                  comments:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Comment"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/:
    post:
      summary: Create comment
      description: This route posts a comment under a specified upload.
      tags:
        - Comments
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/CommentRequest"
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Comment"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{comment_id}/:
    delete:
      summary: Delete comment
      description: This route permanently deletes a specified comment. Upload owners may delete all comments under their uploads, and comment authors may delete their comments.
      tags:
        - Comments
      parameters:
        - name: comment_id
          in: path
          description: Numeric ID of the comment to delete
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Deleted comment.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /buckets/:
    post:
      summary: Create bucket
      description: This route creates a bucket specific to the user. A user cannot have multiple buckets of the same name. A user must create at least one bucket before uploading a video.
      tags:
        - Buckets
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/BucketRequest"
      responses:
        '201':
          description: Bucket created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_id}/buckets:
    get:
      summary: Get all buckets
      description: Retrieve a list of buckets owned by a given user.
      tags:
        - Buckets
      parameters:
        - name: user_id
          in: path
          description: The user whose comments the client wishes to fetch.
          required: true
          schema:
            $ref: '#/components/schemas/UserIDOrMe'
      responses:
        '200':
          description: 'Retrieved buckets'
          content:
            application/json:
              schema:
                type: object
                required: [buckets]
                properties:
                  buckets:
                    type: array
                    items:
                        type: object
                        $ref: "#/components/schemas/Bucket"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /buckets/{bucket_id}/:
    put:
      summary: Edit bucket
      description: This route only updates the properties of a bucket. To transfer an upload to another bucket, see [Edit Upload](#tag/Uploads/operation/editUpload).
      tags:
        - Buckets
      parameters:
        - name: bucket_id
          in: path
          description: Numeric ID of the bucket to edit
          required: true
          schema:
            $ref: '#/components/schemas/BucketID'
      requestBody:
        description: All fields are optional
        required: false
        content:
          'application/json':
              schema:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/BucketName'
      responses:
        '200':
          description: Updated bucket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete bucket
      description: This route permanently deletes a specified bucket and all its associated uploads.
      tags:
        - Buckets
      parameters:
        - name: bucket_id
          in: path
          description: Numeric ID of the bucket to delete
          required: true
          schema:
            $ref: '#/components/schemas/BucketID'
      responses:
        '204':
          description: Deleted bucket and uploads
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/search:
    get:
      summary: Search for users
      description: This route returns a list of users given a search query. The current user is excluded from the response.
      tags:
        - Courtships
      parameters:
        - name: q
          in: query
          description: The search query.
          required: true
          schema:
            type: string
            example: tennislover9
      responses:
        '200':
          description: 'Retrieved search results.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                        type: object
                        $ref: "#/components/schemas/OtherUser"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courtships/requests/:
    post:
      summary: Create courtship request
      description: This route begins the courting process, ha ha 😐. Request that another user become your friend, student, xor coach. The current user cannot have an existing relationship with the specified user. For example, requesting to friend someone who has already requested to friend you will yield an error. As another example, requesting to coach your friend will yield an error until you unfriend them.
      tags:
        - Courtships
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                type: object
                required:
                  - user_id
                  - type
                properties:
                  user_id:
                    $ref: '#/components/schemas/UserID'
                  type:
                    $ref: '#/components/schemas/CourtshipReqType'
      responses:
        '201':
          description: Courtship request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtherUserWCourtshipReq'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courtships/requests:
    get:
      summary: Get all courtship requests
      description:
          Retrieve a list of all users with whom the client has an incoming or outgoing courtship request.
      tags:
        - Courtships
      parameters:
        - name: type
          in: query
          description: Filter response by the type of request.
          required: false
          schema:
            $ref: '#/components/schemas/CourtshipReqType'
        - name: dir
          in: query
          description: Filter response by the direction of the request.
          required: false
          schema:
            $ref: '#/components/schemas/CourtshipReqDir'
      responses:
        '200':
          description: 'Retrieved courtship requests'
          content:
            application/json:
              schema:
                type: object
                required:
                  - requests
                properties:
                  requests:
                    type: array
                    items:
                        $ref: '#/components/schemas/OtherUserWCourtshipReq'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courtships/requests/{other_user_id}/:
    put:
      summary: Update incoming courtship request
      description: This route responds to an incoming courtship request.
      tags:
        - Courtships
      parameters:
        - name: other_user_id
          in: path
          description: Numeric ID of the other user to whom the current user wishes to respond
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      requestBody:
        description: The user's response to the courtship request
        required: true
        content:
          'application/json':
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
                    enum:
                      - accept
                      - decline
      responses:
        '204':
          description: Responded to request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete outgoing courtship request
      tags:
        - Courtships
      parameters:
        - name: other_user_id
          in: path
          description: Numeric ID of the other user to whom the request was sent
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      responses:
        '204':
          description: Deleted request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_id}/courtships:
    get:
      summary: Get all courtships
      description:
          Retrieve a list of all users who have established courtships with a given user.
      tags:
        - Courtships
      parameters:
        - name: user_id
          in: path
          description: The user whose courtships the client wishes to fetch.
          required: true
          schema:
            $ref: '#/components/schemas/UserIDOrMe'
        - name: type
          in: query
          description: Filter response by the type of courtship. For example, "student" will only return the user's students.
          required: false
          schema:
            $ref: '#/components/schemas/CourtshipType'
      responses:
        '200':
          description: 'Retrieved courtships'
          content:
            application/json:
              schema:
                type: object
                required:
                  - courtships
                properties:
                  courtships:
                    type: array
                    items:
                        $ref: "#/components/schemas/OtherUserWCourtship"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{other_user_id}/courtships/:
    delete:
      summary: Delete courtship
      tags:
        - Courtships
      parameters:
        - name: other_user_id
          in: path
          description: Numeric ID of the other user involved in the courtship
          required: true
          schema:
            $ref: '#/components/schemas/UserID'
      responses:
        '204':
          description: Deleted request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:

    UploadID:
      type: integer
      description: "An upload's unique identifier."
      format: int64
      minimum: 1
      example: 1

    UploadCreated:
      type: string
      description: "When an upload was created"
      format: date-time

    UploadDisplayTitle:
      type: string
      description: "An upload's display title."
      example: "Winning volley against Nadal"

    Upload:
        type: object
        required:
            - id
            - created
            - display_title
            - stream_ready
            - bucket
            - visibility
        properties:
            id:
              $ref: "#/components/schemas/UploadID"
            created:
              $ref: "#/components/schemas/UploadCreated"
            display_title:
              $ref: "#/components/schemas/UploadDisplayTitle"
            stream_ready:
              type: boolean
              description: "A flag which determines if an upload has been processed and is ready for playback."
              example: true
            bucket:
              $ref: "#/components/schemas/Bucket"
            visibility:
              $ref: "#/components/schemas/VisibilitySetting"
            thumbnail:
              description: "Will be omitted if stream_ready is false."
              type: string
              example: "https://www.something.jpg"

    VisibilityDefault:
      type: string
      description: The default visibility mode. For example, "coaches" automatically shares an upload with all of the user's coaches.
      enum:
        - private
        - coaches-only
        - friends-only
        - friends-and-coaches
        - public

    VisibilitySettingReq:
      type: object
      required:
        - default
        - also_shared_with
      properties:
        default:
          $ref: "#/components/schemas/VisibilityDefault"
        also_shared_with:
          description: "A list of user IDs who are exceptions to the default visibility mode. Any included user will be able to view an upload with this visibility, regardless of the default."
          type: array
          items:
            type: integer
            format: int64
            minimum: 1

    VisibilitySetting:
      type: object
      required:
        - default
        - also_shared_with
      properties:
        default:
          $ref: "#/components/schemas/VisibilityDefault"
        also_shared_with:
          description: "Exceptions to the default visibility mode. Any included user will be able to view an upload with this visibility, regardless of the default."
          type: array
          items:
            $ref: "#/components/schemas/OtherUser"

    Me:
      description: "The currently logged in user. Exposes sensitive profile information."
      allOf:
        - $ref: "#/components/schemas/OtherUser"
        - type: object
          required:
            - email
          properties:
            email:
              $ref: "#/components/schemas/UserEmail"

    UserEmail:
      type: string
      description: "The user's email address."
      format: email
      pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
      example: johnsmith@gmail.com

    UserPassword:
      type: string
      description: "The user's password."
      format: password
      pattern: ^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9\-\"[\]!#$%&'()*+,./:;<=>?@^_`{|}~])[A-Za-z0-9\-\"[\]!#$%&'()*+,./:;<=>?@^_`{|}~]{6,}$
      example: Tnns31!

    UserID:
      type: integer
      description: "A user's unique identifier."
      format: int64
      minimum: 1
      example: 1

    UserIDOrMe:
      oneOf:
        - type: string
          description: "An alias for the client's ID."
          enum: [me]
        - $ref: "#/components/schemas/UserID"

    UserUsername:
      type: string
      description: "A unique, user-friendly profile identifier."
      pattern: ^(?=.*?[a-z])[a-z0-9_.]{4,16}$
      example: tennislover9

    UserDisplayName:
      type: string
      description: "The name of a user."
      example: John Smith

    UserBio:
      type: string
      description: "A personalized biography."
      example: I couldn't figure out why the ball was getting bigger. Then it hit me.

    OtherUserNoCourtship:
      type: object
      description: "A building-block for other schemas."
      required:
        - id
        - username
        - display_name
        - biography
        - n_uploads
        - n_courtships
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        username:
          $ref: "#/components/schemas/UserUsername"
        display_name:
          $ref: "#/components/schemas/UserDisplayName"
        biography:
          $ref: "#/components/schemas/UserBio"
        n_uploads:
          type: integer
          description: "The number of uploads owned by the user that are visible to the logged in user."
          format: int64
          minimum: 0
          example: 29
        n_courtships:
          type: object
          description: "Counts of the user's courtships."
          required:
            - friends
            - coaches
            - students
          properties:
            friends:
              type: integer
              description: "A count of this user's friends."
              format: int64
              minimum: 0
              example: 86
            coaches:
              type: integer
              description: "A count of this user's coaches."
              format: int64
              minimum: 0
              example: 2
            students:
              type: integer
              description: "A count of this user's students."
              format: int64
              minimum: 0
              example: 10

    OtherUser:
      type: object
      description: "A synopsis of a user's profile. What you might find as an identifier to a user's comment or upload."
      allOf:
        - $ref: "#/components/schemas/OtherUserNoCourtship"
        - type: object
          required:
            - courtship
          properties:
            courtship:
              type: object
              nullable: true
              description: "The client's relationship with this user. Will be `null` if the client *is* this user."
              example: null
              oneOf:
                - $ref: "#/components/schemas/Courtship"
                - $ref: "#/components/schemas/CourtshipReq"

    OtherUserWCourtship:
      type: object
      description: "A profile synopsis of another user with whom the client has an established courtship."
      allOf:
        - $ref: "#/components/schemas/OtherUserNoCourtship"
        - type: object
          required:
            - courtship
          properties:
            courtship:
              $ref: "#/components/schemas/Courtship"

    OtherUserWCourtshipReq:
      type: object
      description: "A profile synopsis of another user with whom the client has a pending courtship request."
      allOf:
        - $ref: "#/components/schemas/OtherUserNoCourtship"
        - type: object
          required:
            - courtship
          properties:
            courtship:
              $ref: "#/components/schemas/CourtshipReq"

    User:
      type: object
      description: A profile synposis of a user that may or may not be the client and contain sensitive information.
      oneOf:
        - $ref: "#/components/schemas/Me"
        - $ref: "#/components/schemas/OtherUser"

    CourtshipType:
      type: string
      enum:
        - friend
        - student
        - coach

    CourtshipReqType:
      type: string
      enum:
        - friend-req
        - student-req
        - coach-req

    CourtshipReqDir:
      type: string
      description: "The direction of the request. `out` signifies the user sent the request."
      enum:
        - in
        - out

    Courtship:
      type: object
      description: An established courtship.
            <table>
            <tr>
                <th>Courtship Type</th>
                <th>Meaning</th>
            </tr>
            <tr>
                <td>friend</td>
                <td>This user is your friend</td>
            </tr>
            <tr>
                <td>coach</td>
                <td>This user is your coach</td>
            </tr>
            <tr>
                <td>friend</td>
                <td>This user is your student</td>
            </tr>
            </table>
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CourtshipType"

    CourtshipReq:
      type: object
      description: A pending courtship request.
            <table>
                <tr>
                    <th>Dir</th>
                    <th>Request Type</th>
                    <th>Meaning</th>
                </tr>
                <tr>
                    <td>out</td>
                    <td>friend</td>
                    <td>You request to add another user as a friend</td>
                </tr>
                <tr>
                    <td>out</td>
                    <td>coach</td>
                    <td>You request that another user becomes your coach</td>
                </tr>
                <tr>
                    <td>out</td>
                    <td>student</td>
                    <td>You request that another user becomes your student</td>
                </tr>
                <tr>
                    <td>in</td>
                    <td>friend</td>
                    <td>Another user requests to add you as a friend</td>
                </tr>
                <tr>
                    <td>in</td>
                    <td>coach</td>
                    <td>Another user requests that you coach them</td>
                </tr>
                <tr>
                    <td>in</td>
                    <td>student</td>
                    <td>Another user requests to coach you</td>
                </tr>
            </table>
      required:
        - type
        - dir
      properties:
        type:
          $ref: "#/components/schemas/CourtshipReqType"
        dir:
          $ref: "#/components/schemas/CourtshipReqDir"

    BucketID:
      type: integer
      description: "A bucket's unique identifier."
      format: int64
      minimum: 1
      example: 1

    Bucket:
      allOf:
        - type: object
          required:
          - id
          - size
          - last_modified
          properties:
            id:
              $ref: "#/components/schemas/BucketID"
            size:
              type: integer
              description: "The quantity of uploads in this bucket."
              format: int32
              minimum: 0
              example: 5
            last_modified:
              type: string
              description: "If the bucket is empty, the bucket's creation datetime."
              format: date-time
        - $ref: '#/components/schemas/BucketRequest'

    BucketName:
      type: string
      description: "The title of the bucket."
      example: "Forehand Groundstrokes 🎾"

    BucketRequest:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/BucketName'

    Comment:
      allOf:
        - type: object
          required:
              - id
              - created
              - author
          properties:
            id:
              type: integer
              description: "The comment's unique identifier."
              format: int64
              minimum: 1
            created:
              type: string
              format: date-time
            author:
              $ref: "#/components/schemas/User"
        - $ref: "#/components/schemas/CommentRequest"

    CommentRequest:
      type: object
      description: "Schema required to create a comment."
      required:
        - upload_id
        - text
      properties:
        text:
          type: string
          description: "The body of the comment."
          example: "Tennis goals!!! LOML 😍"
        upload_id:
          type: integer
          description: "The unique upload ID under which the comment is posted."
          format: int64
          minimum: 1

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
security:
  - cookieAuth: []
